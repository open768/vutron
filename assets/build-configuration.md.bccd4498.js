import{_ as s,c as n,o as a,a as e}from"./app.4b285366.js";const F=JSON.parse('{"title":"Build Configurations","description":"","frontmatter":{},"headers":[{"level":2,"title":"Build settings for projects that use Native Node modules","slug":"build-settings-for-projects-that-use-native-node-modules","link":"#build-settings-for-projects-that-use-native-node-modules","children":[]},{"level":2,"title":"What do I need to do for a multi-platform build?","slug":"what-do-i-need-to-do-for-a-multi-platform-build","link":"#what-do-i-need-to-do-for-a-multi-platform-build","children":[]},{"level":2,"title":"Reduce bundle size by excluding development files","slug":"reduce-bundle-size-by-excluding-development-files","link":"#reduce-bundle-size-by-excluding-development-files","children":[]}],"relativePath":"build-configuration.md"}'),o={name:"build-configuration.md"},l=e(`<h1 id="build-configurations" tabindex="-1">Build Configurations <a class="header-anchor" href="#build-configurations" aria-hidden="true">#</a></h1><p>Once the module installation is complete, you can simply build the platform package with the command below.</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># For Windows (.exe, .appx)</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build:win</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># For macOS (.dmg)</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build:mac</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># For Linux (.rpm, .deb, .snap)</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build:linux</span></span>
<span class="line"></span></code></pre></div><p>The built packages can be found in <code>release/{version}</code> location.</p><h2 id="build-settings-for-projects-that-use-native-node-modules" tabindex="-1">Build settings for projects that use Native Node modules <a class="header-anchor" href="#build-settings-for-projects-that-use-native-node-modules" aria-hidden="true">#</a></h2><p>For projects that use the <strong>Native Node Module</strong>, add the following script to your <code>package.json</code>: When installing dependencies, <code>electron-builder</code> will take care of any modules that require rebuilding.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">postinstall</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">electron-builder install-app-deps</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>For more information, please refer to the following article: <a href="https://webpack.electron.build/dependency-management#installing-native-node-modules" target="_blank" rel="noreferrer">https://webpack.electron.build/dependency-management#installing-native-node-modules</a></p><h2 id="what-do-i-need-to-do-for-a-multi-platform-build" tabindex="-1">What do I need to do for a multi-platform build? <a class="header-anchor" href="#what-do-i-need-to-do-for-a-multi-platform-build" aria-hidden="true">#</a></h2><p><strong>macOS</strong> is recommended if you want to build multiple platforms simultaneously on one platform. Because it can be configured with just a few very simple settings.</p><p>You can perform multi-platform builds at once with the following command. Alternatively, you can just do it for the OS you want via the individual build commands above.</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span>
<span class="line"></span></code></pre></div><p><code>Multipass</code> configuration may be required for Linux builds. Learn more about <code>Multipass</code> through the following link: <a href="https://multipass.run" target="_blank" rel="noreferrer">https://multipass.run</a></p><h2 id="reduce-bundle-size-by-excluding-development-files" tabindex="-1">Reduce bundle size by excluding development files <a class="header-anchor" href="#reduce-bundle-size-by-excluding-development-files" aria-hidden="true">#</a></h2><p>You can exclude files you don&#39;t need at build time by adding a file pattern to the files property of <code>electron-builder.json5</code>. This will save bundle capacity.</p><p>Below is an unnecessary <code>node_modules</code> file pattern that can further save bundles. Depending on the project, using the rules below may cause problems, so please review it before using.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/.*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/node_modules/**/{CONTRIBUTORS,CNAME,AUTHOR,TODO,CONTRIBUTING,COPYING,INSTALL,NEWS,PORTING,Makefile,htdocs,CHANGELOG,ChangeLog,changelog,README,Readme,readme,test,sample,example,demo,composer.json,tsconfig.json,jsdoc.json,tslint.json,typings.json,gulpfile,bower.json,package-lock,Gruntfile,CMakeLists,karma.conf,yarn.lock}*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/node_modules/**/{man,benchmark,node_modules,spec,cmake,browser,vagrant,doxy*,bin,obj,obj.target,example,examples,test,tests,doc,docs,msvc,Xcode,CVS,RCS,SCCS}{,/**/*}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/node_modules/**/*.{conf,png,pc,coffee,txt,spec.js,ts,js.flow,html,def,jst,xml,ico,in,ac,sln,dsp,dsw,cmd,vcproj,vcxproj,vcxproj.filters,pdb,exp,obj,lib,map,md,sh,gypi,gyp,h,cpp,yml,log,tlog,Makefile,mk,c,cc,rc,xcodeproj,xcconfig,d.ts,yaml,hpp}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/node_modules/**/node-v*-x64{,/**/*}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/node_modules/bluebird/js/browser{,/**/*}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/node_modules/bluebird/js/browser{,/**/*}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/node_modules/source-map/dist{,/**/*}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/node_modules/lodash/fp{,/**/*}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/node_modules/async/!(dist|package.json)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/node_modules/async/internal{,/**/*}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/node_modules/ajv/dist{,/**/*}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/node_modules/ajv/scripts{,/**/*}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/node_modules/node-pre-gyp/!(lib|package.json)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/node_modules/node-pre-gyp/lib/!(util|pre-binding.js|node-pre-gyp.js)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/node_modules/node-pre-gyp/lib/util/!(versioning.js|abi_crosswalk.json)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/node_modules/source-map-support/browser-source-map-support.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!**/node_modules/json-schema/!(package.json|lib)</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div>`,17),p=[l];function t(c,r,i,d,u,D){return a(),n("div",null,p)}const C=s(o,[["render",t]]);export{F as __pageData,C as default};
